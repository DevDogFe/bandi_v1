<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bandi.novel.repository.NovelSectionRepository">

	<select id="selectFirstSectionByNovelId" resultType="integer">
		SELECT id
		FROM novel_section_tb
		WHERE novel_id = #{novel_id}
		LIMIT 1
	</select>

	<select id="selectListByNovelId" resultType="com.bandi.novel.dto.response.SectionListDto">
		SELECT ns.*, s.score
		FROM novel_section_tb AS ns
		LEFT JOIN
		(
		SELECT section_id, avg(score) AS score
		FROM score_tb
		GROUP BY section_id
		) AS s
		ON ns.id = s.section_id
		ORDER BY ns.id DESC
	</select>

	<insert id="insert">
		INSERT INTO novel_section_tb (novel_id, title,
		content, list_price, rent_price)
		VALUES (#{novelId}, #{title},
		#{content}, #{listPrice}, #{rentPrice});
	</insert>

	<select id="selectById" resultType="com.bandi.novel.model.NovelSection">
		SELECT * FROM novel_section_tb
		WHERE id = #{id}
	</select>

	<update id="updateViewsById">
		UPDATE novel_section_tb
		SET views = views + 1
		WHERE id = #{sectionId}
	</update>

	<!-- @author 경은 -->
	<select id="selectNovelSectionCount">
		SELECT count(id)
		FROM novel_section_tb
		WHERE novel_id =
		#{novelId}
	</select>


	<select id="selectNovelByPage" resultType="com.bandi.novel.dto.response.SectionDto">
		SELECT *
		FROM(
		SELECT
		id,novel_id,title,content,created_at,recommend,
		favorite,views,list_price,rent_price,
		LAG(id, 1, 0) OVER(ORDER BY id ASC) AS
		prev_id,
		LAG(title, 1, '이전글이 없습니다') OVER (ORDER BY id) AS prev_title,
		LEAD(id, 1, 0) OVER(ORDER BY id ASC) AS next_id,
		LEAD(title, 1, '다음글이 없습니다')
		OVER (ORDER BY id) AS next_title
		FROM novel_section_tb
		where novel_id = ${novelId}
		) sub_tb
		where id = ${sectionId}
		ORDER BY id desc;
	</select>

	<delete id="deleteNovelSectionById">
		delete
		from novel_section_tb
		where id = #{id}
	</delete>

	<!-- 유저 구매 대여 기록 조회 -->
	<!-- FORMATDATETIME MYSQL로 변환 시에 DATE_FORMAT으로 변경 -->
	<select id="selectPurchaseRentalRecord" resultType="com.bandi.novel.dto.response.UserPurchaseRentalRecord">
		select ns.id,up.section_id as purchase_section_id,
		ur.section_id as rental_section_id
		,DATE_FORMAT(ur.begin_rental, '%Y-%m-%d %H:%i:%s') as begin_rental
		,DATE_FORMAT(ur.end_rental, '%Y-%m-%d %H:%i:%s') as end_rental
		from novel_section_tb as ns
		left join
		(
		select *
		from
		user_purchase_tb
		where user_id = #{userId}
		) as up
		on ns.id = up.section_id
		left join
		(
		select *
		from user_rental_tb
		where user_id = #{userId} and (end_rental > now())
		) as ur
		on ns.id = ur.section_id
		where ns.novel_id = #{novelId}
		order by id desc
	</select>

	<select id="selectPurchaseRentalRecordByIds" resultType="com.bandi.novel.dto.response.UserPurchaseRentalRecord">
		select ns.id,up.section_id as purchase_section_id,
		ur.section_id as rental_section_id
		,ur.begin_rental
		,ur.end_rental
		from novel_section_tb as ns
		left join
		(
		select *
		from
		user_purchase_tb
		where user_id = #{userId} and section_id = #{sectionId}
		) as up
		on ns.id = up.section_id
		left join
		(
		select *
		from user_rental_tb
		where user_id = #{userId} and (end_rental > now()) and section_id = #{sectionId}
		order by end_rental desc
		) as ur
		on ns.id = ur.section_id
		where ns.novel_id = #{novelId} and ns.id = #{sectionId}
		order by id desc
	</select>



</mapper>