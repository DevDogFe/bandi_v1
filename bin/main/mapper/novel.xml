<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bandi.novel.repository.NovelRepository">

	<select id="selectUserFavoriteListByUserId" resultType="com.bandi.novel.dto.response.MyFavoriteDto">
		<if test="limit != null">
			SELECT n.id, n.title, g.name AS genre_name, u.nick_name AS author_name
			FROM novel_tb AS n
			INNER JOIN user_favorite_tb AS uf
			ON n.id = uf.novel_id
			LEFT JOIN genre_tb AS g
			ON n.genre_id = g.id
			LEFT JOIN user_tb AS u
			ON n.user_id = u.id
			WHERE uf.user_id = #{userId}
			LIMIT #{limit}
		</if>
		<if test="limit == null">
			SELECT n.id, n.title, g.name AS genre_name, u.nick_name AS author_name
			FROM novel_tb AS n
			INNER JOIN user_favorite_tb AS uf
			ON n.id = uf.novel_id
			LEFT JOIN genre_tb AS g
			ON n.genre_id = g.id
			LEFT JOIN user_tb AS u
			ON n.user_id = u.id
			WHERE uf.user_id = #{userId}
		</if>
	</select>

	<select id="selectMyNovelsByUserId" resultType="com.bandi.novel.dto.response.MyFavoriteDto">
		<if test="limit != null">
			SELECT n.id, n.title, g.name AS genre_name
			FROM novel_tb AS n
			LEFT JOIN genre_tb AS g
			ON n.genre_id = g.id
			WHERE n.user_id = #{userId}
			LIMIT #{limit}
		</if>
		<if test="limit == null">
			SELECT n.id, n.title, g.name AS genre_name
			FROM novel_tb AS n
			LEFT JOIN genre_tb AS g
			ON n.genre_id = g.id
			WHERE n.user_id = #{userId}
		</if>

	</select>

	<select id="selectPayNovelsByGenreIdAndName" resultType="com.bandi.novel.dto.response.NovelDto">
		<if test='sort.equals("default")'>
			<if test='genreId != null and search != null'>
				SELECT n.id, n.title, n.user_id, u.nick_name, g.name AS genre_name, g.id AS genre_id, favoriteCount, score
				FROM novel_tb AS n
				LEFT JOIN user_tb AS u
				ON n.user_id = u.id
				LEFT JOIN genre_tb
				AS
				g
				ON n.genre_id = g.id
				LEFT JOIN
				(
				SELECT count(user_id) AS favoriteCount, novel_id
				FROM user_favorite_tb
				GROUP BY novel_id
				) AS uf
				ON n.id = uf.novel_id
				LEFT JOIN
				(
				SELECT novel_id, avg(score) AS score
				FROM
				novel_section_tb AS ns
				LEFT JOIN
				(
				SELECT avg(score) AS score, section_id
				FROM score_tb
				GROUP BY section_id
				) AS sc
				ON ns.id = sc.section_id
				GROUP BY ns.novel_id
				) AS ns
				ON n.id = ns.novel_id
				WHERE
				n.service_type_id = 1
				AND g.id = #{genreId}
				AND n.title LIKE CONCAT('%', #{search}, '%')
				ORDER BY n.id DESC
			</if>
			<if test='genreId != null and search == null'>
				SELECT n.id, n.title, n.user_id, u.nick_name, g.name AS genre_name, g.id AS genre_id, favoriteCount, score
				FROM novel_tb AS n
				LEFT JOIN user_tb AS u
				ON n.user_id = u.id
				LEFT JOIN genre_tb
				AS
				g
				ON n.genre_id = g.id
				LEFT JOIN
				(
				SELECT count(user_id) AS favoriteCount, novel_id
				FROM user_favorite_tb
				GROUP BY novel_id
				) AS uf
				ON n.id = uf.novel_id
				LEFT JOIN
				(
				SELECT novel_id, avg(score) AS score
				FROM
				novel_section_tb AS ns
				LEFT JOIN
				(
				SELECT avg(score) AS score, section_id
				FROM score_tb
				GROUP BY section_id
				) AS sc
				ON ns.id = sc.section_id
				GROUP BY ns.novel_id
				) AS ns
				ON n.id = ns.novel_id
				WHERE
				n.service_type_id = 1
				AND g.id = #{genreId}
				AND n.title LIKE CONCAT('%', #{search}, '%')
				AND g.id = #{genreId}
			</if>
			<if test='genreId == null and search != null'>
				SELECT n.id, n.title, n.user_id, u.nick_name, g.name AS genre_name, g.id AS genre_id, favoriteCount, score
				FROM novel_tb AS n
				LEFT JOIN user_tb AS u
				ON
				n.user_id = u.id
				LEFT JOIN genre_tb AS
				g
				ON n.genre_id = g.id
				LEFT JOIN
				(
				SELECT count(user_id) AS favoriteCount, novel_id
				FROM user_favorite_tb
				GROUP BY novel_id
				) AS uf
				ON n.id = uf.novel_id
				LEFT JOIN
				(
				SELECT novel_id, avg(score) AS score FROM
				novel_section_tb AS ns
				LEFT JOIN
				(
				SELECT avg(score) AS score, section_id
				FROM score_tb
				GROUP BY section_id
				) AS sc
				ON ns.id = sc.section_id
				GROUP BY ns.novel_id
				) AS ns
				ON n.id = ns.novel_id
				WHERE
				n.service_type_id = 1
				AND n.title LIKE CONCAT('%', #{search}, '%')
			</if>
		</if>
		<if test='sort.equals("favorite")'>
			<if test='genreId != null and search != null'>
				SELECT n.id, n.title, n.user_id, u.nick_name, g.name AS genre_name, g.id AS genre_id, favoriteCount, score
				FROM novel_tb AS n
				LEFT JOIN user_tb AS u
				ON n.user_id = u.id
				LEFT JOIN genre_tb
				AS
				g
				ON n.genre_id = g.id
				LEFT JOIN
				(
				SELECT count(user_id) AS favoriteCount, novel_id
				FROM user_favorite_tb
				GROUP BY novel_id
				) AS uf
				ON n.id = uf.novel_id
				LEFT JOIN
				(
				SELECT novel_id, avg(score) AS score
				FROM
				novel_section_tb AS ns
				LEFT JOIN
				(
				SELECT avg(score) AS score, section_id
				FROM score_tb
				GROUP BY section_id
				) AS sc
				ON ns.id = sc.section_id
				GROUP BY ns.novel_id
				) AS ns
				ON n.id = ns.novel_id
				WHERE
				n.service_type_id = 1
				AND g.id = #{genreId}
				AND n.title LIKE CONCAT('%', #{search}, '%')
				ORDER BY favoriteCount DESC
			</if>
			<if test='genreId != null and search == null'>
				SELECT n.id, n.title, n.user_id, u.nick_name, g.name AS genre_name, g.id AS genre_id, favoriteCount, score
				FROM novel_tb AS n
				LEFT JOIN user_tb AS u
				ON n.user_id = u.id
				LEFT JOIN genre_tb
				AS
				g
				ON n.genre_id = g.id
				LEFT JOIN
				(
				SELECT count(user_id) AS favoriteCount, novel_id
				FROM user_favorite_tb
				GROUP BY novel_id
				) AS uf
				ON n.id = uf.novel_id
				LEFT JOIN
				(
				SELECT novel_id, avg(score) AS score
				FROM
				novel_section_tb AS ns
				LEFT JOIN
				(
				SELECT avg(score) AS score, section_id
				FROM score_tb
				GROUP BY section_id
				) AS sc
				ON ns.id = sc.section_id
				GROUP BY ns.novel_id
				) AS ns
				ON n.id = ns.novel_id
				WHERE
				n.service_type_id = 1
				AND g.id = #{genreId}
				AND n.title LIKE CONCAT('%', #{search}, '%')
				AND g.id = #{genreId}
				ORDER BY favoriteCount DESC
			</if>
			<if test='genreId == null and search != null'>
				SELECT n.id, n.title, n.user_id, u.nick_name, g.name AS genre_name, g.id AS genre_id, favoriteCount, score
				FROM novel_tb AS n
				LEFT JOIN user_tb AS u
				ON
				n.user_id = u.id
				LEFT JOIN genre_tb AS
				g
				ON n.genre_id = g.id
				LEFT JOIN
				(
				SELECT count(user_id) AS favoriteCount, novel_id
				FROM user_favorite_tb
				GROUP BY novel_id
				) AS uf
				ON n.id = uf.novel_id
				LEFT JOIN
				(
				SELECT novel_id, avg(score) AS score FROM
				novel_section_tb AS ns
				LEFT JOIN
				(
				SELECT avg(score) AS score, section_id
				FROM score_tb
				GROUP BY section_id
				) AS sc
				ON ns.id = sc.section_id
				GROUP BY ns.novel_id
				) AS ns
				ON n.id = ns.novel_id
				WHERE
				n.service_type_id = 1
				AND n.title LIKE CONCAT('%', #{search}, '%')
				ORDER BY favoriteCount DESC
			</if>
		</if>
		<if test='sort.equals("score")'>
			<if test='genreId != null and search != null'>
				SELECT n.id, n.title, n.user_id, u.nick_name, g.name AS genre_name, g.id AS genre_id, favoriteCount, score
				FROM novel_tb AS n
				LEFT JOIN user_tb AS u
				ON n.user_id = u.id
				LEFT JOIN genre_tb
				AS
				g
				ON n.genre_id = g.id
				LEFT JOIN
				(
				SELECT count(user_id) AS favoriteCount, novel_id
				FROM user_favorite_tb
				GROUP BY novel_id
				) AS uf
				ON n.id = uf.novel_id
				LEFT JOIN
				(
				SELECT novel_id, avg(score) AS score
				FROM
				novel_section_tb AS ns
				LEFT JOIN
				(
				SELECT avg(score) AS score, section_id
				FROM score_tb
				GROUP BY section_id
				) AS sc
				ON ns.id = sc.section_id
				GROUP BY ns.novel_id
				) AS ns
				ON n.id = ns.novel_id
				WHERE
				n.service_type_id = 1
				AND g.id = #{genreId}
				AND n.title LIKE CONCAT('%', #{search}, '%')
				ORDER BY score DESC
			</if>
			<if test='genreId != null and search == null'>
				SELECT n.id, n.title, n.user_id, u.nick_name, g.name AS genre_name, g.id AS genre_id, favoriteCount, score
				FROM novel_tb AS n
				LEFT JOIN user_tb AS u
				ON n.user_id = u.id
				LEFT JOIN genre_tb
				AS
				g
				ON n.genre_id = g.id
				LEFT JOIN
				(
				SELECT count(user_id) AS favoriteCount, novel_id
				FROM user_favorite_tb
				GROUP BY novel_id
				) AS uf
				ON n.id = uf.novel_id
				LEFT JOIN
				(
				SELECT novel_id, avg(score) AS score
				FROM
				novel_section_tb AS ns
				LEFT JOIN
				(
				SELECT avg(score) AS score, section_id
				FROM score_tb
				GROUP BY section_id
				) AS sc
				ON ns.id = sc.section_id
				GROUP BY ns.novel_id
				) AS ns
				ON n.id = ns.novel_id
				WHERE
				n.service_type_id = 1
				AND g.id = #{genreId}
				AND n.title LIKE CONCAT('%', #{search}, '%')
				AND g.id = #{genreId}
				ORDER BY score DESC
			</if>
			<if test='genreId == null and search != null'>
				SELECT n.id, n.title, n.user_id, u.nick_name, g.name AS genre_name, g.id AS genre_id, favoriteCount, score
				FROM novel_tb AS n
				LEFT JOIN user_tb AS u
				ON
				n.user_id = u.id
				LEFT JOIN genre_tb AS
				g
				ON n.genre_id = g.id
				LEFT JOIN
				(
				SELECT count(user_id) AS favoriteCount, novel_id
				FROM user_favorite_tb
				GROUP BY novel_id
				) AS uf
				ON n.id = uf.novel_id
				LEFT JOIN
				(
				SELECT novel_id, avg(score) AS score FROM
				novel_section_tb AS ns
				LEFT JOIN
				(
				SELECT avg(score) AS score, section_id
				FROM score_tb
				GROUP BY section_id
				) AS sc
				ON ns.id = sc.section_id
				GROUP BY ns.novel_id
				) AS ns
				ON n.id = ns.novel_id
				WHERE
				n.service_type_id = 1
				AND n.title LIKE CONCAT('%', #{search}, '%')
				ORDER BY score DESC
			</if>
		</if>
	</select>

	<select id="selectFreeNovelsByGenreIdAndName" resultType="com.bandi.novel.dto.response.NovelDto">
		<if test='sort.equals("default")'>
			<if test='genreId != null and search != null'>
				SELECT n.id, n.title, n.user_id, u.nick_name, g.name AS genre_name, g.id AS genre_id, favoriteCount, score
				FROM novel_tb AS n
				LEFT JOIN user_tb AS u
				ON
				n.user_id = u.id
				LEFT JOIN genre_tb AS
				g
				ON n.genre_id = g.id
				LEFT JOIN
				(
				SELECT count(user_id) AS favoriteCount, novel_id
				FROM user_favorite_tb
				GROUP BY novel_id
				) AS uf
				ON n.id = uf.novel_id
				LEFT JOIN
				(
				SELECT novel_id, avg(score) AS score FROM
				novel_section_tb AS ns
				LEFT JOIN
				(
				SELECT avg(score) AS score, section_id
				FROM score_tb
				GROUP BY section_id
				) AS sc
				ON ns.id = sc.section_id
				GROUP BY ns.novel_id
				) AS ns
				ON n.id = ns.novel_id
				WHERE
				n.service_type_id = 2
				AND g.id = #{genreId}
				AND n.title LIKE CONCAT('%', #{search}, '%')
				ORDER BY n.id DESC
			</if>
			<if test='genreId != null and search == null'>
				SELECT n.id, n.title, n.user_id, u.nick_name, g.name AS genre_name, g.id AS genre_id, favoriteCount, score
				FROM novel_tb AS n
				LEFT JOIN user_tb AS u
				ON
				n.user_id = u.id
				LEFT JOIN genre_tb AS
				g
				ON n.genre_id = g.id
				LEFT JOIN
				(
				SELECT count(user_id) AS favoriteCount, novel_id
				FROM user_favorite_tb
				GROUP BY novel_id
				) AS uf
				ON n.id = uf.novel_id
				LEFT JOIN
				(
				SELECT novel_id, avg(score) AS score FROM
				novel_section_tb AS ns
				LEFT JOIN
				(
				SELECT avg(score) AS score, section_id
				FROM score_tb
				GROUP BY section_id
				) AS sc
				ON ns.id = sc.section_id
				GROUP BY ns.novel_id
				) AS ns
				ON n.id = ns.novel_id
				WHERE
				n.service_type_id = 2
				AND g.id = #{genreId}
			</if>
			<if test='genreId == null and search != null'>
				SELECT n.id, n.title, n.user_id, u.nick_name, g.name AS genre_name, g.id AS genre_id, favoriteCount, score
				FROM novel_tb AS n
				LEFT JOIN user_tb AS u
				ON
				n.user_id = u.id
				LEFT JOIN genre_tb AS
				g
				ON n.genre_id = g.id
				LEFT JOIN
				(
				SELECT count(user_id) AS favoriteCount, novel_id
				FROM user_favorite_tb
				GROUP BY novel_id
				) AS uf
				ON n.id = uf.novel_id
				LEFT JOIN
				(
				SELECT novel_id, avg(score) AS score FROM
				novel_section_tb AS ns
				LEFT JOIN
				(
				SELECT avg(score) AS score, section_id
				FROM score_tb
				GROUP BY section_id
				) AS sc
				ON ns.id = sc.section_id
				GROUP BY ns.novel_id
				) AS ns
				ON n.id = ns.novel_id
				WHERE
				n.service_type_id = 2
				AND n.title LIKE CONCAT('%', #{search}, '%')
			</if>
		</if>
		<if test='sort.equals("favorite")'>
			<if test='genreId != null and search != null'>
				SELECT n.id, n.title, n.user_id, u.nick_name, g.name AS genre_name, g.id AS genre_id, favoriteCount, score
				FROM novel_tb AS n
				LEFT JOIN user_tb AS u
				ON
				n.user_id = u.id
				LEFT JOIN genre_tb AS
				g
				ON n.genre_id = g.id
				LEFT JOIN
				(
				SELECT count(user_id) AS favoriteCount, novel_id
				FROM user_favorite_tb
				GROUP BY novel_id
				) AS uf
				ON n.id = uf.novel_id
				LEFT JOIN
				(
				SELECT novel_id, avg(score) AS score FROM
				novel_section_tb AS ns
				LEFT JOIN
				(
				SELECT avg(score) AS score, section_id
				FROM score_tb
				GROUP BY section_id
				) AS sc
				ON ns.id = sc.section_id
				GROUP BY ns.novel_id
				) AS ns
				ON n.id = ns.novel_id
				WHERE
				n.service_type_id = 2
				AND g.id = #{genreId}
				AND n.title LIKE CONCAT('%', #{search}, '%')
				ORDER BY favoriteCount DESC
			</if>
			<if test='genreId != null and search == null'>
				SELECT n.id, n.title, n.user_id, u.nick_name, g.name AS genre_name, g.id AS genre_id, favoriteCount, score
				FROM novel_tb AS n
				LEFT JOIN user_tb AS u
				ON
				n.user_id = u.id
				LEFT JOIN genre_tb AS
				g
				ON n.genre_id = g.id
				LEFT JOIN
				(
				SELECT count(user_id) AS favoriteCount, novel_id
				FROM user_favorite_tb
				GROUP BY novel_id
				) AS uf
				ON n.id = uf.novel_id
				LEFT JOIN
				(
				SELECT novel_id, avg(score) AS score FROM
				novel_section_tb AS ns
				LEFT JOIN
				(
				SELECT avg(score) AS score, section_id
				FROM score_tb
				GROUP BY section_id
				) AS sc
				ON ns.id = sc.section_id
				GROUP BY ns.novel_id
				) AS ns
				ON n.id = ns.novel_id
				WHERE
				n.service_type_id = 2
				AND g.id = #{genreId}
				ORDER BY favoriteCount DESC
			</if>
			<if test='genreId == null and search != null'>
				SELECT n.id, n.title, n.user_id, u.nick_name, g.name AS genre_name, g.id AS genre_id, favoriteCount, score
				FROM novel_tb AS n
				LEFT JOIN user_tb AS u
				ON
				n.user_id = u.id
				LEFT JOIN genre_tb AS
				g
				ON n.genre_id = g.id
				LEFT JOIN
				(
				SELECT count(user_id) AS favoriteCount, novel_id
				FROM user_favorite_tb
				GROUP BY novel_id
				) AS uf
				ON n.id = uf.novel_id
				LEFT JOIN
				(
				SELECT novel_id, avg(score) AS score FROM
				novel_section_tb AS ns
				LEFT JOIN
				(
				SELECT avg(score) AS score, section_id
				FROM score_tb
				GROUP BY section_id
				) AS sc
				ON ns.id = sc.section_id
				GROUP BY ns.novel_id
				) AS ns
				ON n.id = ns.novel_id
				WHERE
				n.service_type_id = 2
				AND n.title LIKE CONCAT('%', #{search}, '%')
				ORDER BY favoriteCount DESC
			</if>
		</if>
		<if test='sort.equals("score")'>
			<if test='genreId != null and search != null'>
				SELECT n.id, n.title, n.user_id, u.nick_name, g.name AS genre_name, g.id AS genre_id, favoriteCount, score
				FROM novel_tb AS n
				LEFT JOIN user_tb AS u
				ON
				n.user_id = u.id
				LEFT JOIN genre_tb AS
				g
				ON n.genre_id = g.id
				LEFT JOIN
				(
				SELECT count(user_id) AS favoriteCount, novel_id
				FROM user_favorite_tb
				GROUP BY novel_id
				) AS uf
				ON n.id = uf.novel_id
				LEFT JOIN
				(
				SELECT novel_id, avg(score) AS score FROM
				novel_section_tb AS ns
				LEFT JOIN
				(
				SELECT avg(score) AS score, section_id
				FROM score_tb
				GROUP BY section_id
				) AS sc
				ON ns.id = sc.section_id
				GROUP BY ns.novel_id
				) AS ns
				ON n.id = ns.novel_id
				WHERE
				n.service_type_id = 2
				AND g.id = #{genreId}
				AND n.title LIKE CONCAT('%', #{search}, '%')
				ORDER BY score DESC
			</if>
			<if test='genreId != null and search == null'>
				SELECT n.id, n.title, n.user_id, u.nick_name, g.name AS genre_name, g.id AS genre_id, favoriteCount, score
				FROM novel_tb AS n
				LEFT JOIN user_tb AS u
				ON
				n.user_id = u.id
				LEFT JOIN genre_tb AS
				g
				ON n.genre_id = g.id
				LEFT JOIN
				(
				SELECT count(user_id) AS favoriteCount, novel_id
				FROM user_favorite_tb
				GROUP BY novel_id
				) AS uf
				ON n.id = uf.novel_id
				LEFT JOIN
				(
				SELECT novel_id, avg(score) AS score FROM
				novel_section_tb AS ns
				LEFT JOIN
				(
				SELECT avg(score) AS score, section_id
				FROM score_tb
				GROUP BY section_id
				) AS sc
				ON ns.id = sc.section_id
				GROUP BY ns.novel_id
				) AS ns
				ON n.id = ns.novel_id
				WHERE
				n.service_type_id = 2
				AND g.id = #{genreId}
				ORDER BY score DESC
			</if>
			<if test='genreId == null and search != null'>
				SELECT n.id, n.title, n.user_id, u.nick_name, g.name AS genre_name, g.id AS genre_id, favoriteCount, score
				FROM novel_tb AS n
				LEFT JOIN user_tb AS u
				ON
				n.user_id = u.id
				LEFT JOIN genre_tb AS
				g
				ON n.genre_id = g.id
				LEFT JOIN
				(
				SELECT count(user_id) AS favoriteCount, novel_id
				FROM user_favorite_tb
				GROUP BY novel_id
				) AS uf
				ON n.id = uf.novel_id
				LEFT JOIN
				(
				SELECT novel_id, avg(score) AS score FROM
				novel_section_tb AS ns
				LEFT JOIN
				(
				SELECT avg(score) AS score, section_id
				FROM score_tb
				GROUP BY section_id
				) AS sc
				ON ns.id = sc.section_id
				GROUP BY ns.novel_id
				) AS ns
				ON n.id = ns.novel_id
				WHERE
				n.service_type_id = 2
				AND n.title LIKE CONCAT('%', #{search}, '%')
				ORDER BY score DESC
			</if>
		</if>
	</select>

	<insert id="insertNovel">
		INSERT INTO novel_tb (user_id, genre_id, service_type_id, title, overview, serial_cycle)
		VALUES
		(#{userId}, #{genreId}, #{serviceTypeId}, #{title}, #{overview}, #{serialCycle})
	</insert>

	<select id="selectPayNovels" resultType="com.bandi.novel.dto.response.NovelDto">
		<if test='sort.equals("default")'>
			SELECT n.id, n.title, n.user_id, u.nick_name, g.name AS genre_name, g.id AS genre_id, favoriteCount, score
			FROM novel_tb AS n
			LEFT JOIN user_tb AS u
			ON
			n.user_id = u.id
			LEFT JOIN genre_tb AS
			g
			ON n.genre_id = g.id
			LEFT JOIN
			(
			SELECT count(user_id) AS favoriteCount, novel_id
			FROM user_favorite_tb
			GROUP BY novel_id
			) AS uf
			ON n.id = uf.novel_id
			LEFT JOIN
			(
			SELECT novel_id, avg(score) AS score FROM
			novel_section_tb AS ns
			LEFT JOIN
			(
			SELECT avg(score) AS score, section_id
			FROM score_tb
			GROUP BY section_id
			) AS sc
			ON ns.id = sc.section_id
			GROUP BY ns.novel_id
			)
			AS ns
			ON n.id = ns.novel_id
			WHERE
			n.service_type_id = 1
			ORDER BY n.id DESC
		</if>
		<if test='sort.equals("favorite")'>
			SELECT n.id, n.title, n.user_id, u.nick_name, g.name AS genre_name, g.id AS genre_id, favoriteCount, score
			FROM novel_tb AS n
			LEFT JOIN user_tb AS u
			ON
			n.user_id = u.id
			LEFT JOIN genre_tb AS
			g
			ON n.genre_id = g.id
			LEFT JOIN
			(
			SELECT count(user_id) AS favoriteCount, novel_id
			FROM user_favorite_tb
			GROUP BY novel_id
			) AS uf
			ON n.id = uf.novel_id
			LEFT JOIN
			(
			SELECT novel_id, avg(score) AS score FROM
			novel_section_tb AS ns
			LEFT JOIN
			(
			SELECT avg(score) AS score, section_id
			FROM score_tb
			GROUP BY section_id
			) AS sc
			ON ns.id = sc.section_id
			GROUP BY ns.novel_id
			)
			AS ns
			ON n.id = ns.novel_id
			WHERE
			n.service_type_id = 1
			ORDER BY favoriteCount DESC
		</if>
		<if test='sort.equals("score")'>
			SELECT n.id, n.title, n.user_id, u.nick_name, g.name AS genre_name, g.id AS genre_id, favoriteCount, score
			FROM novel_tb AS n
			LEFT JOIN user_tb AS u
			ON
			n.user_id = u.id
			LEFT JOIN genre_tb AS
			g
			ON n.genre_id = g.id
			LEFT JOIN
			(
			SELECT count(user_id) AS favoriteCount, novel_id
			FROM user_favorite_tb
			GROUP BY novel_id
			) AS uf
			ON n.id = uf.novel_id
			LEFT JOIN
			(
			SELECT novel_id, avg(score) AS score FROM
			novel_section_tb AS ns
			LEFT JOIN
			(
			SELECT avg(score) AS score, section_id
			FROM score_tb
			GROUP BY section_id
			) AS sc
			ON ns.id = sc.section_id
			GROUP BY ns.novel_id
			)
			AS ns
			ON n.id = ns.novel_id
			WHERE
			n.service_type_id = 1
			ORDER BY score DESC
		</if>
	</select>

	<select id="selectFreeNovels" resultType="com.bandi.novel.dto.response.NovelDto">
		<if test='sort.equals("default")'>
			SELECT n.id, n.title, n.user_id, u.nick_name, g.name AS genre_name, g.id AS genre_id, favoriteCount, score
			FROM novel_tb AS n
			LEFT JOIN user_tb AS u
			ON
			n.user_id = u.id
			LEFT JOIN genre_tb AS
			g
			ON n.genre_id = g.id
			LEFT JOIN
			(
			SELECT count(user_id) AS favoriteCount, novel_id
			FROM user_favorite_tb
			GROUP BY novel_id
			) AS uf
			ON n.id = uf.novel_id
			LEFT JOIN
			(
			SELECT novel_id, avg(score) AS score FROM
			novel_section_tb AS ns
			LEFT JOIN
			(
			SELECT avg(score) AS score, section_id
			FROM score_tb
			GROUP BY section_id
			) AS sc
			ON ns.id = sc.section_id
			GROUP BY ns.novel_id
			)
			AS ns
			ON n.id = ns.novel_id
			WHERE
			n.service_type_id = 2
			ORDER BY n.id DESC
		</if>
		<if test='sort.equals("favorite")'>
			SELECT n.id, n.title, n.user_id, u.nick_name, g.name AS genre_name, g.id AS genre_id, favoriteCount, score
			FROM novel_tb AS n
			LEFT JOIN user_tb AS u
			ON
			n.user_id = u.id
			LEFT JOIN genre_tb AS
			g
			ON n.genre_id = g.id
			LEFT JOIN
			(
			SELECT count(user_id) AS favoriteCount, novel_id
			FROM user_favorite_tb
			GROUP BY novel_id
			) AS uf
			ON n.id = uf.novel_id
			LEFT JOIN
			(
			SELECT novel_id, avg(score) AS score FROM
			novel_section_tb AS ns
			LEFT JOIN
			(
			SELECT avg(score) AS score, section_id
			FROM score_tb
			GROUP BY section_id
			) AS sc
			ON ns.id = sc.section_id
			GROUP BY ns.novel_id
			)
			AS ns
			ON n.id = ns.novel_id
			WHERE
			n.service_type_id = 2
			ORDER BY favoriteCount DESC
		</if>
		<if test='sort.equals("score")'>
			SELECT n.id, n.title, n.user_id, u.nick_name, g.name AS genre_name, g.id AS genre_id, favoriteCount, score
			FROM novel_tb AS n
			LEFT JOIN user_tb AS u
			ON
			n.user_id = u.id
			LEFT JOIN genre_tb AS
			g
			ON n.genre_id = g.id
			LEFT JOIN
			(
			SELECT count(user_id) AS favoriteCount, novel_id
			FROM user_favorite_tb
			GROUP BY novel_id
			) AS uf
			ON n.id = uf.novel_id
			LEFT JOIN
			(
			SELECT novel_id, avg(score) AS score FROM
			novel_section_tb AS ns
			LEFT JOIN
			(
			SELECT avg(score) AS score, section_id
			FROM score_tb
			GROUP BY section_id
			) AS sc
			ON ns.id = sc.section_id
			GROUP BY ns.novel_id
			)
			AS ns
			ON n.id = ns.novel_id
			WHERE
			n.service_type_id = 2
			ORDER BY score DESC
		</if>
	</select>

	<select id="selectNovelDetailByNovelId" resultType="com.bandi.novel.dto.response.NovelDetailDto">
		SELECT n.id, n.title, n.service_type_id, n.created_At, n.cover, n.overview, n.serial_cycle, n.user_id, u.username, g.name AS genre_name,
		s.name AS service_type_name
		FROM novel_tb AS n
		LEFT JOIN user_tb AS u
		ON n.user_id = u.id
		LEFT JOIN genre_tb AS g
		ON n.genre_id = g.id
		LEFT JOIN service_type_tb AS s
		ON n.service_type_id = s.id
		WHERE n.id =
		#{id}
	</select>

	<select id="selectNovelByUserIdAndTitle" resultType="com.bandi.novel.model.Novel">
		SELECT * FROM novel_tb
		WHERE user_id = #{userId}
		AND title = #{title}
	</select>

	<!-- @author 경은 -->
	<select id="selectNovelIdByModel" resultType="Integer">
		SELECT id FROM novel_tb
		WHERE user_id = #{userId}
		AND genre_id = #{genreId} AND service_type_id = #{serviceTypeId}
		AND title = #{title} AND overview =
		#{overview}
		AND serial_cycle = #{serialCycle}
	</select>

	<delete id="deleteNovelByContestId">
		delete
		from novel_tb
		where id in(select novel_id from contest_novel_tb where contest_id = #{contestId})
	</delete>

	<delete id="deleteNovelById">
		delete
		from novel_tb
		where id = #{id}
	</delete>

	<update id="updateCover">
		UPDATE novel_tb
		SET cover = #{cover}
		WHERE id = #{novelId}
	</update>
	<!-- -->
</mapper>